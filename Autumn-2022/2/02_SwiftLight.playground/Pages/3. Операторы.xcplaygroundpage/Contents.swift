//: [Previous](@previous)
//: # Операторы
//:### Оператор — это специальный символ или выражение для проверки, изменения или сложения величин.


//:## Арифметические операторы
/*:
 - сложение (+)
 - вычитание (-)
 - умножение (*)
 - деление (/)
*/
1 + 2 // равно 3
5 - 3 // равно 2
2 * 3 // равно 6
10.0 / 2.5 // равно 4.0

//: Так же можно делать конкатенацию строк
"hello, " + "world"  // равно "hello, world"


//: ## Оператор присваивания
//: Оператор присваивания (a = b) инициализирует или изменяет значение переменной a на значение b
let bValue = 10
var aValue = 5
aValue = bValue // теперь a равно 10

let (x, y) = (1, 2) // x равно 1, а y равно 2

//: Существуют составные операторы присваивания. Совмещают простое присваивание (=) с другой операцией
aValue += 10 // теперь aValue равно 20


//: ## Оператор целочисленного деления
//: ### Оператор целочисленного деления (a % b) показывает, какое количество b помещается внутри a, и возвращает остаток деления a на b.
//: ![Operator 1](Operator1.png)
9 % 4 // равно 1 - сколько четверок содержится в девятке

//: ## Операторы сравнения
/*:
 - равно (a == b)
 - не равно (a != b)
 - больше (a > b)
 - меньше (a < b)
 - больше или равно (a >= b)
 - меньше или равно (a <= b)
*/
1 == 1 // истина, так как 1 равно 1
2 != 1 // истина, так как 2 не равно 1
2 > 1 // истина, так как 2 больше чем 1
1 < 2 // истина, так как 1 меньше 2
1 >= 1 // истина, так как 1 больше либо равно 1
2 <= 1 // ложь, так как 2 не меньше либо равно 1


//: ## Логические операторы
//: ### Логические операторы изменяют или комбинируют логические значения типа Boolean (булево) — true и false.

/*:
 логическое НЕ (!a)
 логическое И (a && b)
 логическое ИЛИ (a || b)
*/
let isTrue = true
print(!isTrue)

print(true && true)
print(true || false)
print(true || false && (false || true))


//: ## Тернарный оператор
//: ### Тернарный условный оператор — это специальный оператор из трех частей, имеющий следующий синтаксис: выражение ? действие1 : действие2. Он выполняет одно из двух действий в зависимости от того, является ли выражение true или false.

/*:
 Тернарный условный оператор является краткой записью следующего кода:

    if выражение {
     действие1
    } else {
     действие2
    }
*/
let contentHeight = 40
let hasHeader = true
let rowHeight = contentHeight + (hasHeader ? 50 : 20) // Чему равно rowHeight?


//: ## Операторы диапазона
//: ### В языке Swift есть два оператора диапазона, которые в короткой форме задают диапазон значений.

//: Оператор замкнутого диапазона (a...b) задает диапазон от a до b, включая сами a и b. При этом значение a не должно превышать b.
let closedRange = 1...5

for index in closedRange {
    print("Index of range: \(index)")
}
//: Оператор полузамкнутого диапазона (a..<b) задает диапазон от a до b, исключая значение b.
let semiClosedRange = 1..<5

for index in semiClosedRange {
    print("Index of range: \(index)")
}
//: Односторонние диапазоны продолжаются насколько возможно, но только в одну сторону, например, диапазон, который включает все элементы массива, начиная от 2 и до последнего индекса.
let oneWayRange1 = [2...]
let oneWayRange2 = [...2]


//: ## Задачи

//: #1
//let a = "123"
//let b = "7"
//print(a + b)

//: #2
//let a = 5.1
//let b = 7
//print(a + b)

//: #3
//let a = 10
//let b = 3
//let c = a / b
//print(c, type(of: c))

//: #4
//let a = 10.0
//let b = 2
//let c = a / b
//print(type(of: c))

//: #5
//let a = 10.0
//let b = 3.0
//let c = a / b
//print(c, type(of: c))

//: #6
//-4 % 4
//0 % 4

//: #7
//var number = 10
//number = -number
//number = +number

//: Оператор унарного плюса (+) просто возвращает исходное значение без каких-либо изменений
//:
//: Хотя оператор унарного плюса не выполняет никаких действий, он придает коду единообразие, позволяя зрительно отличать положительные значения от отрицательных.

//: [Next](@next)
