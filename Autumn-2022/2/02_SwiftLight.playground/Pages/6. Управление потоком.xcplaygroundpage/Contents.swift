//: [Previous](@previous)
//: # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–º
//: ### if, guard, for-in, while, switch, break, continue

//: ## –¶–∏–∫–ª—ã For-in
//: ### –¶–∏–∫–ª for-in –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —á–∏—Å–µ–ª, —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –∏–ª–∏ —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç—Ä–æ–∫–µ.

for index in 1...5 {
    print("\(index) —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ 5 –±—É–¥–µ—Ç \(index * 5)")
}

let minutes = 60
let minuteInterval = 15
for tickMark in stride(from: 0, to: minutes, by: minuteInterval) {
    print(tickMark)
}

for character in "–ü—ë—Å!üê∂" {
    print(character)
}


//: ## –¶–∏–∫–ª—ã While
//: ### –¶–∏–∫–ª while –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –µ–≥–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ —Å—Ç–∞–Ω–µ—Ç false.

var i = 0
while i < 5 {
    print(i)
    i += 1
}

var j: Int = 0
repeat {
    print(j)
    j += 1
} while j < 5


//: ## –£—Å–ª–æ–≤–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è if

var temperatureInFahrenheit = 30
if temperatureInFahrenheit <= 32 {
     print ("It's very cold. Consider wearing a scarf.")
}

temperatureInFahrenheit = 40
if temperatureInFahrenheit <= 32 {
    print("It's very cold. Consider wearing a scarf.")
} else {
    print("It's not that cold. Wear a t-shirt.")
}

temperatureInFahrenheit = 90
if temperatureInFahrenheit <= 32 {
    print("It's very cold. Consider wearing a scarf.")
} else if temperatureInFahrenheit >= 86 {
    print("It's really warm. Don't forget to wear sunscreen.")
} else {
    print("It's not that cold. Wear a t-shirt.")
}


//: ## –£—Å–ª–æ–≤–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è switch
//: ### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è switch –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–∞–∫–æ–≥–æ-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏.
// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
let someCharacter: Character = "b"
switch someCharacter {
case "a":
    print("The first letter of the alphabet")
case "b":
    print("The second letter of the alphabet")
case "c", "d":
    print("The third and 4-th letter of the alphabet")
default:
    print("Some other character")
}
//: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—É. –ó–Ω–∞—á–µ–Ω–∏—è –≤ –∫–µ–π—Å–∞—Ö switch –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –Ω–∞ –∏—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω.
// –û–ø—Ä–µ–¥–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –¥–ª—è —á–∏—Å–ª–∞
let approximateCount = 62
let countedThings = "moons orbiting Saturn"
var naturalCount: String
switch approximateCount {
case 0:
    naturalCount = "no"
case 1..<5:
    naturalCount = "a few"
case 5..<12:
    naturalCount = "several"
case 12..<100:
    naturalCount = "dozens of"
case 100..<1000:
    naturalCount = "hundreds of"
default:
    naturalCount = "many"
}
print("There are \(naturalCount) \(countedThings).")
//: –ö–æ—Ä—Ç–µ–∂–∏. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä—Ç–µ–∂–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ switch.
// –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –≤ –ø—Ä–º–æ—É–≥–æ–ª—å–Ω–∏–∫–µ
let somePoint = (1, 1)
switch somePoint {
case (0, 0):
    print("\(somePoint) is at the origin")
case (_, 0):
    print("\(somePoint) is on the x-axis")
case (0, _):
    print("\(somePoint) is on the y-axis")
case (-2...2, -2...2):
    print("\(somePoint) is inside the box")
default:
    print("\(somePoint) is outside of the box")
}
//: –ü—Ä–∏–≤—è–∑–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π. –ö–µ–π—Å –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ switch –º–æ–∂–µ—Ç —Å–≤—è–∑—ã–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è, —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏.
// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —á—Ç–æ —Ç–æ—á–∫–∞ –ª–µ–∂–∏—Ç –Ω–∞ –æ—Å–∏
let anotherPoint = (2, 0)
switch anotherPoint {
case (let x, 0):
    print("on the x-axis with an x value of \(x)")
case (0, let y):
    print("on the y-axis with a y value of \(y)")
case let (x, y):
    print("somewhere else at (\(x), \(y))")
}
//: Where. –í –∫–µ–π—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ switch –º—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ where.
// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
let yetAnotherPoint = (1, -1)
switch yetAnotherPoint {
case let (x, y) where x == y:
    print("(\(x), \(y)) is on the line x == y")
case let (x, y) where x == -y:
    print("(\(x), \(y)) is on the line x == -y")
case let (x, y):
    print("(\(x), \(y)) is just some arbitrary point")
}

//: ## –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø–µ—Ä–µ–¥–∞—á–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
//: ### –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø–µ—Ä–µ–¥–∞—á–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—è—é—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∫–æ–¥–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –æ–¥–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –∫–æ–¥–∞ –¥—Ä—É–≥–æ–º—É. continue, break, fallthrough, return, throw.

//: –û–ø–µ—Ä–∞—Ç–æ—Ä Continue. –û–ø–µ—Ä–∞—Ç–æ—Ä continue –≥–æ–≤–æ—Ä–∏—Ç —Ü–∏–∫–ª—É –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é.

for i in 0...5 {
    if i % 2 == 0 {
        continue
    }
    print(i)
}

//: –û–ø–µ—Ä–∞—Ç–æ—Ä Break. –û–ø–µ—Ä–∞—Ç–æ—Ä break –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–º.

for i in 0...10 {
    if i > 4 {
        break
    }
    print(i)
}

switch "a" {
case "a":
    print("The first letter of the alphabet")
case "b":
    break
default:
    print("Some other character")
}

//: –û–ø–µ—Ä–∞—Ç–æ—Ä Fallthrough. –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–∞–ª–∏–≤–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ –ø–æ –∫–µ–π—Å–∞–º –≤ switch

switch "a" {
case "a":
    print("The first letter of the alphabet")
    fallthrough
case "b":
    print("The second letter of the alphabet")
default:
    print("Some other character")
}

//: [Next](@next)
