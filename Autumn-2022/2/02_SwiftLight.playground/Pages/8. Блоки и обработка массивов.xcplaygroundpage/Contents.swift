//: [Previous](@previous)
//: # –ó–∞–º—ã–∫–∞–Ω–∏—è
//: ### –ó–∞–º—ã–∫–∞–Ω–∏—è - —ç—Ç–æ —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –±–ª–æ–∫–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ –≤–∞—à–µ–º –∫–æ–¥–µ. –ê–Ω–∞–ª–æ–≥ –ª—è–º–±–¥—ã –≤ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.

//: ## –ó–∞–º—ã–∫–∞—é—â–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
//: ### –ó–∞–º—ã–∫–∞—é—â–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, —è–≤–ª—è—é—Ç—Å—è —Å–ø–æ—Å–æ–±–æ–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∑–∞–º—ã–∫–∞–Ω–∏–π —á–µ—Ä–µ–∑ –∫—Ä–∞—Ç–∫–∏–π –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.

//: –ü–µ—Ä–µ–¥–∞—á–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
func backward(_ s1: String, _ s2: String) -> Bool {
    return s1 > s2
}

let names = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]
var reversedNames = names.sorted(by: backward)
//: –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–º—ã–∫–∞—é—â–µ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
reversedNames = names.sorted(by: { (s1: String, s2: String) -> Bool in
    return s1 > s2
})
//: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
reversedNames = names.sorted(by: { s1, s2 in return s1 > s2 })
print(reversedNames)
//: –ù–µ—è–≤–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
//func a() -> String {
//    "ABC"
//}
//let a123 = a()

reversedNames = names.sorted(by: { s1, s2 in s1 > s2 })
print(reversedNames)
//: –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
reversedNames = names.sorted(by: { $0 > $1 })
print(reversedNames)
//: –û–ø–µ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
reversedNames = names.sorted(by: >)
print(reversedNames)
//: –ü–æ—Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ
reversedNames = names.sorted { $0 > $1 }


//: ## –ó–∞—Ö–≤–∞—Ç –∑–Ω–∞—á–µ–Ω–∏–π
//: ### –ó–∞–º—ã–∫–∞–Ω–∏—è –º–æ–≥—É—Ç –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –æ–±—ä—è–≤–ª–µ–Ω—ã. –ü–æ—Å–ª–µ –∑–∞—Ö–≤–∞—Ç–∞ –∑–∞–º—ã–∫–∞–Ω–∏–µ –º–æ–∂–µ—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –∏–ª–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–Ω—É—Ç—Ä–∏ —Å–≤–æ–µ–≥–æ —Ç–µ–ª–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–±–ª–∞—Å—Ç—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω—ã —ç—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∂–µ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
func makeIncrementer(forIncrement amount: Int) -> (() -> Int) {
    var runningTotal = 0 // –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏ –∑–∞ —Å—á–µ—Ç —ç—Ç–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏
    func incrementer() -> Int {
      runningTotal += amount
      return runningTotal
    }
    return incrementer
}

let incrementByTen = makeIncrementer(forIncrement: 10)
print(incrementByTen())
print(incrementByTen())
print(incrementByTen())


//: ## –°–±–µ–≥–∞—é—â–∏–µ –∑–∞–º—ã–∫–∞–Ω–∏—è
//: ### –ö–æ–≥–¥–∞ –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –∑–∞–º—ã–∫–∞–Ω–∏–µ —Å–±–µ–≥–∞–µ—Ç –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —ç—Ç–æ –∑–∞–º—ã–∫–∞–Ω–∏–µ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —É–∂–µ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –∑–Ω–∞—á–µ–Ω–∏–µ.

var completionHandlers: [() -> Void] = []

func someFunctionWithEscapingClosure(completionHandler: @escaping () -> Void) {
    completionHandlers.append(completionHandler)
}

func someFunction(completionHandler: () -> Void) {
    completionHandler()
}

someFunction { print("!") }

someFunctionWithEscapingClosure { print("!") }

let completionHandler = completionHandlers[0]
completionHandler()


//func getSomeData(handler: @escaping () -> Void) {
//    getSomeDataFromApi { data in
//        handler(data)
//    }
//}


//: ## –ê–≤—Ç–æ–∑–∞–º—ã–∫–∞–Ω–∏—è
//: ### –ê–≤—Ç–æ–∑–∞–º—ã–∫–∞–Ω–∏—è –ø–æ–∑–≤–æ–ª—è—é—Ç –≤–∞–º –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è, –ø–æ—Ç–æ–º—É –∫–∞–∫ –∫–æ–¥ –≤–Ω—É—Ç—Ä–∏ –Ω–∏—Ö –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–∫–∞ –≤—ã —Å–∞–º–∏ –µ–≥–æ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç–µ.

var customersInLine = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]
print(customersInLine.count)
 
let customerProvider = { customersInLine.remove(at: 0) }
print(customersInLine.count)

customerProvider()
print(customersInLine.count)


//: ## –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–º—ã–∫–∞–Ω–∏–π

let a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

//: filter - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É—Å–ª–æ–≤–∏—é

let evens = a.filter{ $0 % 2 == 0 }
print(evens)

//: map - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ

let doubled = a.map { $0 * 2 }
print(doubled)

//: compactMap - –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω map, —É–¥–∞–ª—è–µ—Ç nil

import Foundation

let urlStrings = [
    "https://www.marvel.com",
    "https://www.üòà.com",
    "https://www.dccomics.com"
]
let urls = urlStrings.map { URL(string: $0) }
print(urls)

//: flatMap - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤ –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π

let numbersArray = [[1, 1, 1], [2, 2, 2], [3, 3, 3]]
let numbersFlatArray = numbersArray.flatMap { $0 }
print(numbersFlatArray)

//: reduce - –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–ª—å—é –ø–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π

let someNames = ["Taylor", "Paul", "Adele"]
let charectersCount = someNames.reduce(10) { $0 + $1.count }
print(charectersCount)

let someArray = [1, 2, 3, 4, 5]
let numbersSum1 = someArray.reduce(0, +)
print(numbersSum1)
let numbersSum2 = someArray.reduce(0) { $0 + $1 }
print(numbersSum2)

//: forEach - –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ

a.forEach {
    print($0)
}

//: [Next](@next)
